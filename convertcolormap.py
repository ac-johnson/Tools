#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
text to cb

Created on Mon Feb 14 16:02:17 2022

@author: andrew
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
# import matplotlib.cbook as cbook
from matplotlib import cm


# ticks=[0,300,900,1600,2000]

def convertcolormap(filename,ticks=None,rangelim=None, plotcb=True,
                    aspect=12,cbheight=8,label=None,fontsize = 18,
                    ticklabelsize=15):
    '''Converts a colormap from QGIS format into a matplotlib cmap and cbar
    
    Input: the file generated by "export colormap to file" option in QGIS.
    Output: The cmap and norm, as well as a plot of the colorbar. 
        Cmap is generated from LinearSegmentedColormap.from_list().
    Options:
        ticks - specify ticks to be displayed
        rangelim - limit how much of the colorbar is displayed, given as [min,max]
        plotcb - plotcb=False will disable plotting the cb
        cbheight - height in inches of cb
        aspect - aspect ratio of the colorbar. Smaller values make the bar fatter.
        plotting tools: label, fontsize (for label), ticks (list to display on plot),
            ticklabelsize.
    '''
    
    with open(fname) as f:
        lines = f.read().splitlines()[2:]
        cdata = []
        for l in lines:
            cdata.append([float(i) for i in l.split(',')])

    cdata = [i[0:5] for i in cdata]
    clist = [[j/255.0 for j in i[1:5]]  for i in cdata]

    cbvals = np.array([i[0] for i in cdata])
    cvmin,cvmax = np.min(cbvals),np.max(cbvals)
    cvrange = cvmax-cvmin
    cbvals = [(i-cvmin)/cvrange for i in cbvals]

    if rangelim:
        cvr1,cvr2 = rangelim
        cvl1,cvl2 = (cvr1-cvmin)/cvrange, (cvr2-cvmin)/cvrange
        clist = [clist[i] for i,x in enumerate(cbvals) if cvl1 <= x <= cvl2]
        cbvals = [(i-cvl1)/(cvl2-cvl1) for i in cbvals if cvl1 <= i <= cvl2 ]
        cvmin,cvmax = cvr1,cvr2

    cbands = [(k,clist[i]) for i,k in enumerate(cbvals)]

    cmap1 = colors.LinearSegmentedColormap.from_list('',cbands)
    norm1 = colors.Normalize(vmin=cvmin, vmax=cvmax)

    if plotcb==True:
        plt.figure(figsize=(cbheight,cbheight))
        ax = plt.gca()
        cbar = plt.colorbar(cm.ScalarMappable(cmap=cmap1,norm=norm1),aspect=aspect)
        if ticks==None:
            ticks=cbar.get_ticks()
        cbar.set_ticks(ticks)
        cbar.ax.tick_params(labelsize=ticklabelsize)
        if label:
            cbar.set_label(label,fontsize=fontsize)
        ax.remove()
        
    return cmap1,norm1

if __name__ == '__main__':
    fname = 'test_colors.txt'


    fname = 'itslive_colors.txt'
    # convertcolormap(fname)
    ticks = [0,100,200,300,500,750,1000,1250,1500,1750,2000]
    convertcolormap(fname,rangelim=[0,2000],ticks=ticks,label='Ice speed (m a$^{-1}$)',
                    aspect=8,fontsize=32,ticklabelsize=25)
    
    
    
    
    
    